Advanced Topics
===============

Security
--------

The RAUC bundle format consists of a squashfs image containing the images and
the manifest, which is followed by a public key signature over the full image.
This signature is stored in the CMS (Cryptographic Message Syntax, see RFC5652_)
format.
Before installation, the signature is verified against the key-ring already
stored on the system.

.. _RFC5652: https://tools.ietf.org/html/rfc5652

We selected the CMS to avoid designing and implementing our own custom security
mechanism (which often results in vulnerabilities).
CMS is well proven in S/MIME and has widely available implementations, while
supporting simple and as well as complex PKI use-cases (certificate expiry,
intermediate CAs, revocation, algorithm selection, hardware security modules…)
without additional complexity in RAUC itself.

RAUC uses OpenSSL_ as a library for signing and verification of bundles.
An PKI with intermediate CAs for the unit tests is generated by the
``test/openssh-ca.sh`` shell script, which may also be useful as an example for
creating your own PKI.

.. _OpenSSL: https://www.openssl.org/

In the following sections, general CA configuration, some use-cases and
corresponding PKI setups are described.

CA Configuration
~~~~~~~~~~~~~~~~

OpenSSL uses a ``openssl.cnf`` file to define paths to use for signing, default
parameters for certificaets and additional parameters to be stored during
signing.
Configuring a CA correctly (and securely) is a complex topic and obviously
exceeds the scope of this documentation.
As a starting point, the OpenSSL manual pages (espcially ca_, req_, x509_, cms_,
verify_ and config_) and Stefan H. Holek's pki-tutorial_ are useful.

.. _ca: https://www.openssl.org/docs/manmaster/man1/ca.html
.. _req: https://www.openssl.org/docs/manmaster/man1/req.html
.. _x509: https://www.openssl.org/docs/manmaster/man1/x509.html
.. _cms: https://www.openssl.org/docs/manmaster/man1/cms.html
.. _verify: https://www.openssl.org/docs/manmaster/man1/verify.html
.. _config: https://www.openssl.org/docs/manmaster/man5/config.html

.. _pki-tutorial: https://pki-tutorial.readthedocs.io/

Single Key
~~~~~~~~~~

You can use ``openssl req -x509 -newkey rsa:4096 -keyout key.pem -out
cert.pem -days 365 -nodes`` to create a key and a self-signed certificate.
While you can use RAUC with these, you can't:

* replace expired certificates without updating the key-ring
* distinguish between development versions and releases
* revoke a compromised key

Simple CA
~~~~~~~~~

By using the (self-signed) root CA only for signing other keys, which are used
for bundle signing, you can:

* create one key per developer, with limited validity periods
* revoke keys and ship the CRL (Certificate Revocation List) with an update

With this setup, you can reduce the impact of a compromised developer key.

Separate Development and Release CAs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

By creating a complete separate CA and bundle signing keys, you can give only
specific persons (or roles) the keys necessary to sign final releases.
Each device only has one of the two CAs in it's key-ring, allowing only
installation of the corresponding updates.

While using signing also during development may seem unnecessary, the additional
testing of the whole update system (RAUC,bootloader, migration code, …) allows
finding problems much earlier.
